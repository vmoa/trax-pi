#!/usr/bin/python3
#
# T-Rax roof controller for the Raspberry Pi
#
# This is a roll-off roof controller specifically designed and built for
# Robert Ferguson Observatory (https://rfo.org) but the code will hopefully
# be generic enough that it can be adapted for other roll-off roofs.
# See README.md for details.

import argparse
from gpiozero import DigitalInputDevice, DigitalOutputDevice
from datetime import datetime
from time import sleep
import signal
import os

import device
import test_mode
import util

heartInterval = 1       # Seconds between heartbeats (drives SIGALRM)
statusInterval = 60     # Seconds between status updates without input changes

# Hard coded GPIO setup
weatherOk = device.Sensor(pin=4, name='wx');
bldgPowerIn = device.Sensor(pin=17, name='bldg');
mountPowerIn = device.Sensor(pin=22, name='mntin');
roofPowerIn = device.Sensor(pin=27, name='roofin');
mountParked = device.Sensor(pin=25, name='park');
roofOpen = device.Sensor(pin=23, name='open');
roofClosed = device.Sensor(pin=24, name='close');

heartLed = device.Control(pin=13, name='heart')
mountPowerOut = device.Control(pin=6, name='mntout', active_high=False)
roofPowerOut = device.Control(pin=5, name='roofout', active_high=False)
laserPowerOut = device.Control(pin=16, name='laser')
fobOutput = device.Control(pin=26, name='fob')

def beatHeart(output=0):
    output.on()
    sleep(0.1)
    output.off()
    sleep(0.05)
    output.on()
    sleep(0.1)
    output.off()

def alarmHandler(signum,frame):
    beatHeart(heartLed.device)
    if (int(datetime.now().second) % statusInterval == 0):
        device.printStatus()


def main():
    parser = argparse.ArgumentParser(description='T-Rax roof controller.')
    parser.add_argument('--test-mode', dest='test_mode', action='store_true', help='enter test mode')
    args = parser.parse_args()

    # Install alarm hanlder
    signal.signal(signal.SIGALRM, alarmHandler)
    signal.alarm(heartInterval)

    device.printStatus();

    if (args.test_mode):
        test = test_mode.TestMode()

    # Interrupt loop
    while True:
        signal.pause()
        signal.alarm(heartInterval)

if __name__ == "__main__":
    main()
