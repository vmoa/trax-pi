#!/usr/bin/python3
#
# T-Rax roof controller for the Raspberry Pi
# T-Rax roof controller tester
#
# This is a roll-off roof controller specifically designed and built for
# Robert Ferguson Observatory (https://rfo.org) but the code will hopefully
# be generic enough that it can be adapted for other roll-off roofs.
# See README.md for details.

from gpiozero import DigitalInputDevice, DigitalOutputDevice
from datetime import datetime
from time import sleep
import signal
import os

import util

from device import Sensor, Control

heartInterval = 1       # Seconds between heartbeats (drives SIGALRM)
statusInterval = 60     # Seconds between status updates without input changes

weatherOk = Sensor(pin=4, name='wx');
bldgPowerIn = Sensor(pin=17, name='bldg');
mountPowerIn = Sensor(pin=22, name='mntin');
roofPowerIn = Sensor(pin=27, name='roofin');
mountParked = Sensor(pin=25, name='park');
roofOpen = Sensor(pin=23, name='open');
roofClosed = Sensor(pin=24, name='close');

heartLed = Control(pin=13, name='heart')
mountPowerOut = Control(pin=6, name='mntout', active_high=False)
roofPowerOut = Control(pin=5, name='roofout', active_high=False)
laserPowerOut = Control(pin=16, name='laser')
fobOutput = Control(pin=26, name='fob')

def beatHeart(output=0):
    output.on()
    sleep(0.1)
    output.off()
    sleep(0.05)
    output.on()
    sleep(0.1)
    output.off()

def alarmHandler(signum,frame):
    beatHeart(heartLed)
    if (int(datetime.now().second) % statusInterval == 0):
        util.printStatus()

# Button press callbacks cause blinkies (which also prints status)
mountPowerIn.when_activated = lambda: blinkOnce(output=mountPowerOut)
roofPowerIn.when_activated  = lambda: blinkOnce(output=roofPowerOut)
mountParked.when_activated  = lambda: blinkOnce(output=laserPowerOut)
roofClosed.when_activated   = lambda: blinkOnce(output=fobOutput)
weatherOk.when_activated   = lambda: blinkTwice(output=mountPowerOut)
bldgPowerIn.when_activated = lambda: blinkTwice(output=mountPowerOut)
roofOpen.when_activated    = lambda: blinkTwice(output=fobOutput)

# Button up callbacks just print status
mountPowerIn.when_deactivated = util.printStatus
roofPowerIn.when_deactivated  = util.printStatus
mountParked.when_deactivated  = util.printStatus
roofClosed.when_deactivated   = util.printStatus
weatherOk.when_deactivated   = util.printStatus
bldgPowerIn.when_deactivated = util.printStatus
roofOpen.when_deactivated    = util.printStatus

# Install alarm hanlder
signal.signal(signal.SIGALRM, alarmHandler)
signal.alarm(heartInterval)

util.printStatus();

# Interrupt loop
while True:
    signal.pause()
    signal.alarm(heartInterval)
