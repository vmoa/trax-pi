#!/usr/bin/python3
#
# T-Rax roof controller tester
#
# This is to verify that all the pins are connected as designed, and a validation
# of the interrupt driven mechanism.

from gpiozero import DigitalInputDevice, DigitalOutputDevice
from datetime import datetime
from time import sleep
import signal
import os

heartInterval = 1       # Seconds between heartbeats (drives SIGALRM)
statusInterval = 60     # Seconds between status updates without input changes

# Define Input GPIO ports (sensors)
# Default sensors have pull-down resistors and are active high
def newSensor(pin, pull_up=False, active_state=True, bounce_time=0.1):
    return DigitalInputDevice(pin=pin, pull_up=pull_up, bounce_time=bounce_time)

weatherOk = newSensor(pin=4);
bldgPowerIn = newSensor(pin=17);
roofPowerIn = newSensor(pin=27);
mountPowerIn = newSensor(pin=22);
roofOpen = newSensor(pin=23);
roofClosed = newSensor(pin=24);
mountParked = newSensor(pin=25);

Sensors = [
    ("wx", weatherOk),
    ("bldg", bldgPowerIn),
    ("mntin", mountPowerIn),
    ("roofin", roofPowerIn),
    ("park", mountParked),
    ("open", roofOpen),
    ("close", roofClosed),
];


# Define Output GPIO ports (controls)
def newControl(pin, active_high=True, initial_value=False):
    return DigitalOutputDevice(pin=pin, active_high=active_high, initial_value=initial_value)

roofPowerOut = newControl(pin=5, active_high=False)
mountPowerOut = newControl(pin=6, active_high=False)
heartLed = newControl(pin=13)
laserPowerOut = newControl(pin=16)
fobOutput = newControl(pin=26)

Controls = [
    ("heart", heartLed),
    ("mntout", mountPowerOut),
    ("roofout", roofPowerOut),
    ("laser", laserPowerOut),
    ("fob", fobOutput),
];

def printStatus():
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S "), end='')
    for tag, gpio in Sensors:
        if (gpio.is_active):
            print("[{}] ".format(tag.upper()), end='')
        else:
            print("({}) ".format(tag), end='')
    for tag, gpio in Controls:
        if (gpio.is_active):
            print("[{}] ".format(tag.upper()), end='')
        else:
            print("({}) ".format(tag), end='')
    print()

def alarmHandler(signum,frame):
    blinkTwice(heartLed)
    if (int(datetime.now().second) % statusInterval == 0):
        printStatus()

def blinkOnce(output=0):
    printStatus()
    output.on()
    sleep(0.25)
    output.off()

def blinkTwice(output=0):
    if (output != heartLed):
        printStatus()
    output.on()
    sleep(0.1)
    output.off()
    sleep(0.05)
    output.on()
    sleep(0.1)
    output.off()

# Button press callbacks cause blinkies (which also prints status)
mountPowerIn.when_activated = lambda: blinkOnce(output=mountPowerOut)
roofPowerIn.when_activated  = lambda: blinkOnce(output=roofPowerOut)
mountParked.when_activated  = lambda: blinkOnce(output=laserPowerOut)
roofClosed.when_activated   = lambda: blinkOnce(output=fobOutput)
weatherOk.when_activated   = lambda: blinkTwice(output=mountPowerOut)
bldgPowerIn.when_activated = lambda: blinkTwice(output=mountPowerOut)
roofOpen.when_activated    = lambda: blinkTwice(output=fobOutput)

# Button up callbacks just print status
mountPowerIn.when_deactivated = printStatus
roofPowerIn.when_deactivated  = printStatus
mountParked.when_deactivated  = printStatus
roofClosed.when_deactivated   = printStatus
weatherOk.when_deactivated   = printStatus
bldgPowerIn.when_deactivated = printStatus
roofOpen.when_deactivated    = printStatus

# Install alarm hanlder
signal.signal(signal.SIGALRM, alarmHandler)
signal.alarm(heartInterval)

printStatus();

# Interrupt loop
while True:
    signal.pause()
    signal.alarm(heartInterval)
